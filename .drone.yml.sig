eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgYnVpbGQ6CiAgICBpbWFnZTogcHl0aG9uOjMuNS4yCiAgICBlbnZpcm9ubWVudDoKICAgICAgICAjIEkgdXNlIGRqX2RhdGFiYXNlX3VybCB0byBzcGVjaWZ5IG15IERCIHNldHRpbmdzCiAgICAgIC0gREFUQUJBU0VfVVJMPXBvc3RncmVzOi8vcG9zdGdyZXNAbG9jYWxob3N0CiAgICBjb21tYW5kczoKICAgICAgLSBzbGVlcCA1ICMgKHByb2JhYmx5IG5vdCBuZWNlc3NhcnkpCiAgICAgIC0gcGlwMyBpbnN0YWxsIC1yIHJlcXVpcmVtZW50cy50eHQKICAgICAgLSBjZCBkcm9uZV90dXRvcmlhbAogICAgICAtIHB5dGhvbiAuL21hbmFnZS5weSB0ZXN0CiAgICAgIC0gY2QgLi4KICAgIHdoZW46CiAgICAgIGJyYW5jaDogWyBtYXN0ZXIgXQogICAgICBldmVudDogW3B1c2gsIHB1bGxfcmVxdWVzdF0gIyB0cmlnZ2VyIHN0ZXAgb24gcHVzaCBhbmQgcHVsbCBldmVudHMKICBwdWJsaXNoOgogICAgaW1hZ2U6IHBsdWdpbnMvZG9ja2VyCiAgICB1c2VybmFtZTogJHtET0NLRVJfVVNFUk5BTUV9ICAjIHdlIHdpbGwgaW5qZWN0IHlvdXIgZG9ja2VyaHViIHVzZXJuYW1lIHVzaW5nIGRyb25lIHNlY3JldHMuCiAgICBwYXNzd29yZDogJHtET0NLRVJfUEFTU1dPUkR9ICMgd2Ugd2lsbCBpbmplY3QgeW91ciBkb2NrZXJodWIgcGFzc3dvcmQgdXNpbmcgZHJvbmUgc2VjcmV0cy4KICAgIGVtYWlsOiBwd2Vuc2VsQGdtYWlsLmNvbQogICAgcmVwbzogcGV0ZXJjYXQvZHJvbmUtdHV0b3JpYWwKICAgIHRhZzogbGF0ZXN0CiAgICBmaWxlOiBEb2NrZXJmaWxlCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfTEFVTkNIX0RFQlVHPXRydWUgIyAoIHVzZWZ1bGwgZm9yIGRlYnVnZ2luZyBidXQgbm90IG5lY2Vzc2FyeSApCiAgICB3aGVuOgogICAgICBicmFuY2g6IFsgbWFzdGVyIF0KICAgICAgZXZlbnQ6IFsgcHVzaCBdICMgc3RlcCBvbmx5IHRyaWdnZXJzIG9uIHB1c2ggZXZlbnRzCiAgc3NoLWRlcGxveToKICAgIGltYWdlOiBhcHBsZWJveS9kcm9uZS1zc2gKICAgIHB1bGw6IHRydWUKICAgIGhvc3Q6ICR7SE9TVH0KICAgIHVzZXI6ICR7VVNFUn0KICAgIGtleTogJHtTU0hfS0VZfQogICAgcG9ydDogMjIKICAgIHB1bGw6IHRydWUKICAgIGNvbW1hbmRfdGltZW91dDogMTgwCiAgICBzY3JpcHQ6CiAgICAgIC0gY2QgL2hvbWUvdWJ1bnR1L2RlcGxveQogICAgICAtIHNoIHR1dG9yaWFsLnNoCiAgICB3aGVuOgogICAgICBldmVudDogW3B1c2gsIHRhZywgZGVwbG95bWVudF0Kc2VydmljZXM6CiAgZGF0YWJhc2U6CiAgICBpbWFnZTogcG9zdGdyZXMKICAgIGVudmlyb25tZW50OgogICAgICAtIERBVEFCQVNFX1VSTD1wb3N0Z3JlczovL3Bvc3RncmVzQGxvY2FsaG9zdAo.NRBLhP8SuPx2MC_CG8LtoZEnjKM-BfQv_3VkoTOGvlk